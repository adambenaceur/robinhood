[{"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\index.js":"1","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\reportWebVitals.js":"2","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\App.js":"3","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Stats.js":"4","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Header.js":"5","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Newsfeed.js":"6","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\LineGraph.js":"7","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\StatsRow.js":"8","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Firebase.js":"9","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\TimeLine.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":495,"mtime":1648005104440,"results":"14","hashOfConfig":"12"},{"size":2910,"mtime":1648237873596,"results":"15","hashOfConfig":"12"},{"size":788,"mtime":1647549886186,"results":"16","hashOfConfig":"12"},{"size":1925,"mtime":1648411788292,"results":"17","hashOfConfig":"12"},{"size":2168,"mtime":1648000854547,"results":"18","hashOfConfig":"12"},{"size":817,"mtime":1648237790396,"results":"19","hashOfConfig":"12"},{"size":479,"mtime":1648069347756,"results":"20","hashOfConfig":"12"},{"size":588,"mtime":1648238344141,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2i7o5l",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\index.js",[],["46","47"],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\reportWebVitals.js",[],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\App.js",[],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Stats.js",["48","49","50"],"import React, {useState, useEffect} from 'react';\r\nimport './Stats.css'; \r\nimport axios from 'axios';\r\nimport StatsRow from './StatsRow';\r\nimport './StatsRow.css'\r\nimport { db } from './Firebase'\r\n\r\nconst TOKEN = 'c8t8niiad3ib2st17mg0';\r\nconst BASE_URL = 'https://finnhub.io/api/v1/quote';\r\n\r\n\r\n\r\nconst testData = []; \r\n\r\nfunction Stats() {\r\n  const [ stocksData, setStocksData] = useState([]) \r\n  const [ myStocks, setMyStocks] = useState([])\r\n\r\n  const getMyStocks = () => {\r\n    db\r\n    .collection('myStocks')\r\n    .onSnapshot(snapshot => {\r\n      let promises = [];\r\n      let tempData = []\r\n      snapshot.docs.map((doc) => {\r\n          promises.push(getStocksData(doc.data().ticker)\r\n        .then(res => {\r\n          tempData.push({\r\n            id: doc.id,\r\n            data: doc.data(),\r\n            info: res.data\r\n          })\r\n        }) \r\n      )})\r\n      Promise.all(promises).then(() => {\r\n        console.log(tempData);\r\n        setMyStocks(tempData);\r\n      })\r\n    })\r\n  }\r\n\r\n  const getStocksData = (stock) => {\r\n    return axios\r\n      .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\r\n      .catch((error) => {\r\n        console.error('Error', error.message);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const stocksList = ['AAPL', 'MSFT', 'TSLA', 'FB', 'BABA', 'UBER', 'DIS', 'SBUX'];\r\n    \r\n    getMyStocks();\r\n    let promises = [];\r\n    stocksList.map((stock) => {\r\n      promises.push(\r\n        getStocksData(stock)\r\n        .then((res) => {\r\n          testData.push({\r\n            name: stock,\r\n            ...res.data\r\n          });\r\n        })\r\n      )\r\n    });\r\n    \r\n    Promise.all(promises).then(() => {\r\n      setStocksData(testData);\r\n      console.log(testData)\r\n    })\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className='stats'>\r\n      <div className='stats__container'>\r\n        <div className='stats__header '>\r\n          <p>Stocks</p>\r\n        </div>\r\n        <div className='stats__content'>\r\n          <div className='stats__rows'>\r\n          {/* for current stocks */}\r\n          {myStocks.map((stock) => (\r\n              <StatsRow\r\n                key={stock.data.ticker}\r\n                name={stock.data.ticker}\r\n                openPrice={stock.info.o}\r\n                shares={stock.data.shares}\r\n                price={stock.info.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className='stats__header stats__lists'>\r\n          <p>lists</p>\r\n        </div>\r\n        <div className='stats__content'>\r\n          <div className='stats__rows'>\r\n          {/*  stocks we can buy*/}\r\n          \r\n          {stocksData.map((stock) => (\r\n            <StatsRow\r\n              key={stock.name}\r\n              name={stock.name}\r\n              openPrice={stock.o}\r\n              price={stock.c}\r\n            />\r\n            ))}\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stats;","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Header.js",["51","52","53","54","55"],"import React from 'react'\r\nimport Logo from './robinhood.svg'\r\nimport './Header.css'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className='header__wrapper'>\r\n        {/* logo */}\r\n        <div className='header__logo'></div>\r\n            <img src={Logo} width={25} alt='robinhood'/>\r\n        {/* search */}\r\n        <div className='header__search'>\r\n            <div className='header__searchContainer'> <input className='header__searchInput'placeholder='Search' type='text'/></div>\r\n        </div>\r\n        {/* menu items */}\r\n        <div className='header__menuItems'>\r\n            <a >Free Stocks</a>\r\n            <a  >Portfolio</a>\r\n            <a >Cash</a>\r\n            <a >Messages</a>\r\n            <a >Account</a>\r\n\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Newsfeed.js",[],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\LineGraph.js",["56"],"import React, {useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport './LineGraph.css'\r\n\r\n\r\nfunction LineGraph() {\r\n    const [graphData, setGraphData ] = useState([]);\r\n    const data = [{\r\n      x:10,\r\n      y:20\r\n    }, {\r\n      x:15,\r\n      y:10\r\n    }]\r\n\r\n    const createMockData = () => {\r\n      let data = [];\r\n      let value = 50;\r\n      for(var i = 0; i < 364; i++) {\r\n        let date = new Date();\r\n        date.setHours(0,0,0,0);\r\n        date.setDate(i);\r\n        value += Math.round((Math.random() < 0.5 ? 1 : 0 ) * Math.random() * 10);\r\n        data.push({x: date, y: value});\r\n      }\r\n      setGraphData(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n      createMockData();\r\n    }, [])\r\n\r\n  return (\r\n      <div className='linegraph'>\r\n          <Line\r\n            data={{\r\n              datasets: [ {\r\n                type: 'line',\r\n                data: graphData,\r\n                backgroundColor: 'black',\r\n                borderColor: '#5AC53B',\r\n                borderWidth:2,\r\n                pointBorderColor: 'rgba(0,0,0,0)',\r\n                pointBackgroundColor: 'rgba(0,0,0,0)',\r\n                pointHoverBackgroundColor: '#5AC53B',\r\n                pointHoverBorderWidth: 4,\r\n                pointHoverRadius: 6,\r\n              }]\r\n            }}\r\n            options={{\r\n              maintainAspectRatio: false,\r\n              legend: {\r\n                display: false\r\n              },\r\n              tooltips: {\r\n                mode: 'index',\r\n                intersect: false\r\n              },\r\n              scales: {\r\n                xAxes: [\r\n                  {\r\n                    type: 'time',\r\n                    time: {\r\n                      format: 'MM/DD/YY',\r\n                      tooltipFormat: 'll',\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    }\r\n                  },\r\n                ],\r\n                yAxes: [{\r\n                  ticks: {\r\n                    display: false\r\n\r\n                  }\r\n                }]\r\n              }\r\n            }}\r\n          />\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph","C:\\Users\\benac\\Documents\\robinhood-clone\\src\\StatsRow.js",[],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\Firebase.js",[],"C:\\Users\\benac\\Documents\\robinhood-clone\\src\\TimeLine.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":25,"column":31,"nodeType":"63","messageId":"64","endLine":25,"endColumn":33},{"ruleId":"61","severity":1,"message":"62","line":55,"column":28,"nodeType":"63","messageId":"64","endLine":55,"endColumn":30},{"ruleId":"65","severity":1,"message":"66","line":72,"column":6,"nodeType":"67","endLine":72,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":17,"column":13,"nodeType":"71","endLine":17,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":18,"column":13,"nodeType":"71","endLine":18,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":19,"column":13,"nodeType":"71","endLine":19,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":20,"column":13,"nodeType":"71","endLine":20,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":21,"column":13,"nodeType":"71","endLine":21,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":8,"column":11,"nodeType":"74","messageId":"75","endLine":8,"endColumn":15},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["78"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [getMyStocks]",{"range":"81","text":"82"},[1717,1719],"[getMyStocks]"]